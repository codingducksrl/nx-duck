'use client'

import i18n from 'i18next';
import {initReactI18next, useTranslation as useTranslationOrg} from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';
import resourcesToBackend from 'i18next-resources-to-backend';
import {getOptions, i18nConfig, languages} from "./settings";
import {useEffect} from "react";
import {useCurrentLocale} from "next-i18n-router/client";
import {TranslationResources} from "./types";

const runsOnServerSide = typeof window === 'undefined'

i18n
    // detect user language
    // learn more: https://github.com/i18next/i18next-browser-languageDetector

    // pass the i18n instance to react-i18next.
    .use(LanguageDetector)
    .use(initReactI18next)
    .use(
        resourcesToBackend(
            (language: string, namespace: keyof TranslationResources) =>
                import(`../locales/${language}/${namespace}.json`)
        )
    )
    // init i18next
    // for all options read: https://www.i18next.com/overview/configuration-options
    .init({
        ...getOptions(),
        lng: undefined,
        detection: {
            // lookupCookie: 'NEXT_LOCALE',
            convertDetectedLanguage: (lng) => {
                return lng.split('_')[0]
            },
            order: ['cookie'],
            caches: []
        },
        interpolation: {
            escapeValue: false, // not needed for react as it escapes by default
        },
        preload: runsOnServerSide ? languages : []
    });

export function useTranslation(ns?: keyof TranslationResources, options?: Parameters<typeof useTranslationOrg>[1]) {

    const locale = useCurrentLocale(i18nConfig);

    const ret = useTranslationOrg(ns, options)
    const {i18n} = ret
    useEffect(() => {
        i18n.changeLanguage(locale)
    }, [locale]);
    return ret
}

